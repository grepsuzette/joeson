package main

/*
  Each Astnode type has a Parse() method.
  When called, it gets 1 of 3 possible wrapping:
  1) if Astnode.IsRule(), wrapping 1.
  2) if (Astnode's Label is not empty
         and parent doesn't HandlesChildLabel (if there's one parent)
	   or in any case if the CbBuilder is set, wrapping 2
  3) otherwise, wrapping 3.

  Once wrapping 1,2or3 determined for 1 object,
  doesn't change anymore.

 Wrapping 1: stack(loopify(prepareResult(fn2, x), x), x)
 Wrapping 2: prepareResult(fn2, x)
 Wrapping 3: fn2

*/
func Wrap() {}

Ref        r0 r1 r2 r3 r4
Pattern    p0 p1 p2 p3 p4 p5 p6
Sequence   s0 s1 s2 s3 s4


mustRunLoopify = false
mustRunStack = false
mustRunPrepareResult = true

runParse:
	r := fn2(ctx, x)
	if mustRunPrepareResult: r := prepareResult(r, x)
	if mustRunLoopify: r := loopify(r, x)
	if mustRunStack: r := stack(r, x)


